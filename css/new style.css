/* CSS Grid for layout CSS Grid for two-dimensional layouts, allowing for complex, responsive designs with ease */
.container {
    /* Use grid layout for two-dimensional placement */
    display: grid;
    /* Create columns that automatically fit the container, with a minimum size of 240px and maximum of 1 fractional unit */
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    /* Space between grid items */
    gap: 1rem;
  }
  
  /* Flexbox for one-dimensional layout Flexbox for one-dimensional layouts, perfect for aligning items in a container, whether in rows or columns. */

  .flex-container {
    /* Use flexbox for alignment */
    display: flex;
    /* Distribute items evenly with space between */
    justify-content: space-between;
    /* Vertically align items in the center */
    align-items: center;
  }
  
  /* CSS Custom Properties (Variables) These allow for easier theme management and dynamic styling. */
  :root {
    /* Define primary color for reuse */
    --primary-color: #3498db;
    /* Define secondary color for reuse */
    --secondary-color: #e74c3c;
  }
  
  /* Use of CSS variables */
  .button {
    /* Set background color using the custom property */
    background-color: var(--primary-color);
    /* Use secondary color for border */
    border: 1px solid var(--secondary-color);
  }
  
  /* Responsive Typography with clamp() Using clamp() for responsive typography, which ensures text scales well across different screen sizes. */
  body {
    /* Use clamp to set font size between 1rem, 1vw, and 1.5rem based on viewport width */
    font-size: clamp(1rem, 1vw, 1.5rem);
  }
  
  /* Neumorphism Design Example Minimalist design focuses on simplicity and usability with clean lines.
Neumorphism offers a soft, almost 3D look with subtle shadows and highlights. */
  .button {
    /* Base color for neumorphism effect */
    background: #e0e5ec;
    /* Create soft shadow for a 3D look */
    box-shadow:  9px 9px 16px #bec3c9,
                -9px -9px 16px #ffffff;
    /* Rounded corners for a softer look */
    border-radius: 50px;
    /* Padding for button text */
    padding: 10px 20px;
  }
  
  /* CSS Animation Using CSS animations for subtle but engaging user interactions. */
  @keyframes bounce {
    /* Keyframes for bounce animation */
    0%, 20%, 50%, 80%, 100% {transform: translateY(0);}
    40% {transform: translateY(-30px);}
    60% {transform: translateY(-15px);}
  }
  
  /* Apply bounce animation */
  .bounce {
    animation: bounce 1s infinite;
  }
  
  /* Dark Mode Implementation Implementing dark mode with media queries or using prefers-color-scheme. */
  @media (prefers-color-scheme: dark) {
    body {
      /* Change background color for dark mode */
      background-color: #333;
      /* Change text color for visibility in dark mode */
      color: white;
    }
  }
  
  /* Responsive Images Using object-fit and srcset for better image handling. */
  img {
    /* Ensure image covers its container without distortion */
    object-fit: cover;
    /* Image will take full width of its container */
    width: 100%;
    /* Set a fixed height for consistency */
    height: 200px;
  }


  /*  
   <div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">
  <div class="flex-shrink-0">
    <!-- ... -->
  </div>
  <div>
    <!-- ... -->
  </div>
</div>  */